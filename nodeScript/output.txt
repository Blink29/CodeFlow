File: jar2app.py
File Path: https://raw.githubusercontent.com/dante-biase/jar2app/master/jar2app.py
{
  "Independent Functions": [
    {
      "name": "main",
      "arguments": [
        "jar_file",
        "icon_file",
        "destination_directory",
        "name"
      ],
      "code": "def main(jar_file, icon_file, destination_directory, name):\n\t# ---------------------------------------------- setup app variables -----------------------------------------------\n\tjar_file = Path(jar_file)\n\tjar_file_parent_directory = Path(jar_file.absolute()).parent\n\tapp_name = name if name else jar_file.stem\n\tapp_name = app_name.rstrip(\".app\")+ \".app\"\n\tapp_jar = f\"{app_name}.jar\"\n\tif not destination_directory:\n\t\tapp_target_path = join(jar_file_parent_directory, app_name)\n\telse:\n\t\tapp_target_path = join(destination_directory, app_name)\n\n\t# ------------------------------- create new app in destination folder from template -------------------------------\n\tif exists(app_target_path):\n\t\toverwrite = \"\"\n\t\twhile not (overwrite == 'y' or overwrite == 'n'):\n\t\t\toverwrite = str(input(f\"{app_target_path} already exists. Replace? [y/n]: \")).strip().lower()\n\n\t\tif overwrite == 'y':\n\t\t\trmtree(app_target_path)\n\t\telse:\n\t\t\texit(0)\n\n\tcopytree(Resources.get(\"template.app\"), app_target_path)\n\n\t# -------------------------------------------- copy input files to app ---------------------------------------------\n\tcopy2(jar_file, join(app_target_path, \"Contents/MacOS\", app_jar))\n\tif icon_file:\n\t\tcopy2(icon_file, join(app_target_path, \"Contents/Resources/application.icns\"))\n\n\t# ----------------------------------------- update arguments in app runner -----------------------------------------\n\tapp_runner = join(app_target_path, \"Contents/MacOS/runner\")\n\twith open(app_runner, \"r\") as file:\n\t\tfile_contents = file.read()\n\n\tfile_contents = file_contents \\\n\t\t.replace(\"[APP_JAR]\", app_jar) \\\n\t\t.replace(\"[APP_NAME]\", app_name)\n\t\n\twith open(app_runner, \"br+\") as file:\n\t\tfile.truncate(0)\n\t\tfile.write(bytes(file_contents, \"ascii\"))\n\t# ----------------------------------------------- show app in finder -----------------------------------------------\n\tcall([\"open\", \"-R\", app_target_path])"
    }
  ]
}

--------------------------------------------------
File: __init__.py
File Path: https://raw.githubusercontent.com/dante-biase/jar2app/master/src/__init__.py
{
  "Independent Functions": []
}

--------------------------------------------------
File: assertions.py
File Path: https://raw.githubusercontent.com/dante-biase/jar2app/master/src/assertions.py
{
  "Independent Functions": [
    {
      "name": "assert_existence",
      "arguments": [
        "path"
      ],
      "code": "def assert_existence(path):\n\tif not exists(path):\n\t\traise BadParameter(f\"\\\"{path}\\\" does not exist.\")"
    },
    {
      "name": "assert_is_file",
      "arguments": [
        "path"
      ],
      "code": "def assert_is_file(path):\n\tassert_existence(path)\n\tif isdir(path):\n\t\traise BadParameter(f\"{path} is a directory.\")"
    },
    {
      "name": "assert_file_type",
      "arguments": [
        "file_path",
        "type_extension"
      ],
      "code": "def assert_file_type(file_path, type_extension):\n\tassert_is_file(file_path)\n\tif Path(file_path).suffix != type_extension:\n\t\traise BadParameter(f\"{file_path} is not a {type_extension.lstrip('.')} file.\")"
    },
    {
      "name": "assert_is_dir",
      "arguments": [
        "path"
      ],
      "code": "def assert_is_dir(path):\n\tassert_existence(path)\n\tif not isdir(path):\n\t\traise BadParameter(f\"{path} is not a directory.\")"
    }
  ]
}

--------------------------------------------------
File: callbacks.py
File Path: https://raw.githubusercontent.com/dante-biase/jar2app/master/src/callbacks.py
{
  "Independent Functions": [
    {
      "name": "check_jar_file",
      "arguments": [
        "ctx",
        "param",
        "file_path"
      ],
      "code": "def check_jar_file(ctx, param, file_path):\n\tassert_file_type(file_path, '.jar')\n\treturn Path(file_path).absolute()"
    },
    {
      "name": "check_icon_file",
      "arguments": [
        "ctx",
        "param",
        "file_path"
      ],
      "code": "def check_icon_file(ctx, param, file_path):\n\tif file_path:\n\t\tassert_file_type(file_path, '.icns')\n\t\tfile_path = Path(file_path).absolute()\n\n\treturn file_path"
    },
    {
      "name": "check_destination_directory",
      "arguments": [
        "ctx",
        "param",
        "directory_path"
      ],
      "code": "def check_destination_directory(ctx, param, directory_path):\n\tif directory_path:\n\t\tassert_is_dir(directory_path)\n\t\tdirectory_path = Path(directory_path).absolute()\n\n\treturn directory_path"
    }
  ]
}

--------------------------------------------------
